{"version":3,"sources":["components/Header.js","components/TodoItem.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","Component","TodoItem","_this","this","styleClass","props","item","completed","role","onClick","handleChange","id","text","TodoList","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","todos","bind","assertThisInitialized","newTodos","map","setState","_this2","todoComponents","src_components_TodoItem","key","App","src_components_Header","components_TodoList","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"mQAceA,gMARP,OACIC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UACdH,EAAAC,EAAAC,cAAA,8BALKE,qBCqBNC,0LAjBF,IAAAC,EAAAC,KACDC,EAAa,YAKjB,OAJID,KAAKE,MAAMC,KAAKC,YAChBH,GAA2B,yBAI3BR,EAAAC,EAAAC,cAAA,OAAKU,KAAK,WAAWT,UAAWK,EAAYK,QAAU,WAClDP,EAAKG,MAAMK,aAAaR,EAAKG,MAAMC,KAAKK,MAGxCf,EAAAC,EAAAC,cAAA,aAAKK,KAAKE,MAAMC,KAAKM,cAddZ,cCuDRa,cAtDX,SAAAA,IAAc,IAAAX,EAAA,OAAAY,OAAAC,EAAA,EAAAD,CAAAX,KAAAU,IACVX,EAAAY,OAAAE,EAAA,EAAAF,CAAAX,KAAAW,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAAf,QACKgB,MAAQ,CACTC,MAAO,CACH,CACIT,GAAI,EACJC,KAAM,mBACNL,WAAW,GAEf,CACII,GAAI,EACJC,KAAM,iBACNL,WAAW,GAEf,CACII,GAAI,EACJC,KAAM,kBACNL,WAAW,KAIvBL,EAAKQ,aAAeR,EAAKQ,aAAaW,KAAlBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAZ,KArBVA,4EAwBDS,GACT,IAAIY,EAAWpB,KAAKgB,MAAMC,MAAMI,IAAK,SAAAlB,GAC7B,OAAIK,IAAOL,EAAKK,GACL,CACHA,GAAIL,EAAKK,GACTC,KAAMN,EAAKM,KACXL,WAAYD,EAAKC,WAGlBD,IAGfH,KAAKsB,SAAS,CAACL,MAAOG,qCAGjB,IAAAG,EAAAvB,KACDwB,EAAiBxB,KAAKgB,MAAMC,MAAMI,IAAK,SAAAlB,GAAI,OAAIV,EAAAC,EAAAC,cAAC8B,EAAD,CAC/ClB,aAAgBgB,EAAKhB,aACrBmB,IAAKvB,EAAKK,GACVL,KAAMA,MACV,OACIV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,WAASU,KAAK,QACTmB,WAjDE3B,aCaR8B,mLATX,OACElC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACiC,EAAD,MACAnC,EAAAC,EAAAC,cAACkC,EAAD,cALUhC,aCOZiC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB7B,QACfuB,UAAUC,cAAcQ,YAI1BC,QAAQC,IACN,gHAKEZ,GAAUA,EAAOa,UACnBb,EAAOa,SAASR,KAMlBM,QAAQC,IAAI,sCAGRZ,GAAUA,EAAOc,WACnBd,EAAOc,UAAUT,UAO5BU,MAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,KC1FjEC,IAASC,OAAO/D,EAAAC,EAAAC,cAAC8D,EAAD,MAASC,SAASC,eAAe,SDgB1C,SAAkBrB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIqB,IAAIC,YAAwB7B,OAAOC,SAAS6B,MACpDC,SAAW/B,OAAOC,SAAS8B,OAIvC,OAGF/B,OAAOgC,iBAAiB,OAAQ,WAC9B,IAAM3B,EAAK,GAAA4B,OAAMJ,YAAN,sBAEP/B,GAgEV,SAAiCO,EAAOC,GAEtC4B,MAAM7B,GACHK,KAAK,SAAAyB,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5CjC,UAAUC,cAAciC,MAAM/B,KAAK,SAAAC,GACjCA,EAAa+B,aAAahC,KAAK,WAC7BV,OAAOC,SAAS0C,aAKpBvC,EAAgBC,EAAOC,KAG1Be,MAAM,WACLJ,QAAQC,IACN,mEArFA0B,CAAwBvC,EAAOC,GAI/BC,UAAUC,cAAciC,MAAM/B,KAAK,WACjCO,QAAQC,IACN,+GAMJd,EAAgBC,EAAOC,MCrC/BE","file":"static/js/main.6d6a8381.chunk.js","sourcesContent":["import React, {Component} from 'react'\r\nimport './Header.css'\r\n\r\nclass Header extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <header className=\"header\">\r\n                <h1>Todo app</h1>\r\n            </header>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header","import React, {Component} from 'react'\r\nimport './TodoItem.css'\r\n\r\n\r\nclass TodoItem extends Component {\r\n\r\n    \r\n    render() {\r\n        let styleClass = 'todo-item'\r\n        if (this.props.item.completed) {\r\n            styleClass =  styleClass + ' todo-item--completed'\r\n        }\r\n\r\n        return (\r\n            <div role=\"listitem\" className={styleClass} onClick={ () => {\r\n                this.props.handleChange(this.props.item.id)\r\n                } }>\r\n                \r\n                <p> {this.props.item.text}</p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoItem","import React, {Component} from 'react'\r\nimport TodoItem from './TodoItem'\r\n\r\nclass TodoList extends Component {\r\n\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            todos: [\r\n                {\r\n                    id: 1,\r\n                    text: \"take the garbage\",\r\n                    completed: false\r\n                },\r\n                {\r\n                    id: 2,\r\n                    text: \"do the laundry\",\r\n                    completed: false\r\n                },\r\n                {\r\n                    id: 3,\r\n                    text: \"get up from bed\",\r\n                    completed: true\r\n                }\r\n            ]\r\n        }\r\n        this.handleChange = this.handleChange.bind(this)\r\n    }\r\n\r\n    handleChange(id) {\r\n        let newTodos = this.state.todos.map( item => {\r\n                if (id === item.id) {\r\n                    return {\r\n                        id: item.id,\r\n                        text: item.text,\r\n                        completed: !item.completed\r\n                    }\r\n                }\r\n                return item\r\n            })\r\n        \r\n        this.setState({todos: newTodos})\r\n    }\r\n\r\n    render() {\r\n        let todoComponents = this.state.todos.map( item => <TodoItem \r\n            handleChange = {this.handleChange}\r\n            key={item.id} \r\n            item={item} /> )\r\n        return (\r\n            <div className=\"container\">\r\n                <section role=\"list\">\r\n                    {todoComponents}\r\n                </section>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoList","import React, { Component } from 'react';\nimport './App.css';\nimport Header from './components/Header'\nimport TodoList from './components/TodoList'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <TodoList />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n\n//serviceWorker.unregister();\nserviceWorker.register();\n"],"sourceRoot":""}